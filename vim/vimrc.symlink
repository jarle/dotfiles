" vim:fdm=marker
let mapleader = "\<Space>"

" za to toggle folds

" Plugin list {{{

call plug#begin('~/.vim/plugged')		"only place plugins between begin and end
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
"Plug 'tpope/vim-projectionist'
Plug 'vim-scripts/indentpython.vim'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf'
Plug 'morhetz/gruvbox'
Plug 'Shougo/context_filetype.vim'
Plug 'Shougo/deoplete.nvim'
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
Plug 'honza/vim-snippets'
Plug 'zchee/deoplete-jedi'
Plug 'zchee/deoplete-clang'
Plug 'ludovicchabant/vim-gutentags'
Plug 'neomake/neomake'
Plug 'sheerun/vim-polyglot'

Plug 'Mattias-/base16-vim'
Plug 'scwood/vim-hybrid'
call plug#end()
" }}}

" General {{{
filetype on
set number
set relativenumber
set showcmd					"show entered command in bottom bar
set cursorline				"highlight current line being edited
set showmatch				"show matching parenthesis
set hidden
set title                   "don't inherit terminal title
set scrolloff=3
set showmode
set nowrap
set sidescroll=1
set scrolloff=8
set sidescrolloff=15
set foldmethod=indent
set foldnestmax=3
set splitright
set splitbelow
set lazyredraw
set shiftround
set autowrite
set clipboard=unnamedplus   "use x clipboard like sane people
" }}}

" Theme {{{
let $TERM='screen-256color'
set termguicolors
set background=dark
colorscheme base16-ocean
highlight Comment gui=italic,bold
" }}}

" Search {{{
set ignorecase
set smartcase               "case-sensitive in case of capital letter
" }}}

" Indentation {{{
set smartindent
set tabstop=4
set softtabstop=0
set expandtab
set shiftwidth=4
" }}}

" File handling {{{
set noswapfile
set nobackup

" Plugin conf {{{
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
let g:neosnippet#enable_snipmate_compatibility = 1

let g:neomake_open_list = 2
autocmd BufWritePost * Neomake
command! -bang -nargs=* Agu call fzf#vim#ag(<q-args>, '--skip-vcs-ignores', {'down': '~40%'})

" Snippets and deoplete voodoo {{{
    let g:deoplete#ignore_sources = {}
    let g:deoplete#ignore_sources._ = ["neosnippet"]

    inoremap <C-k> <Plug>(neosnippet_expand_or_jump)

    " If insert mode+popup menu, use tab and shift tab for manouvering.
    " If insert mode+no popup, use tab for expanding snippets
    inoremap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
    " Close popup on CR
    inoremap <expr><CR> pumvisible() ? deoplete#mappings#close_popup() : "\<CR>"
" }}}

" }}}

" Remappings {{{
nnoremap <leader>w :vsplit $MYVIMRC<cr>
nnoremap <leader>r :source %<CR>

nnoremap <leader><leader> <C-^>

nnoremap <silent><Leader>e :Files<CR>
nnoremap <silent><Leader>a :Buffers<CR>
nnoremap <silent><Leader>g :Commits<CR>
nnoremap <silent><Leader>t :vsplit term://tmux<CR>
nnoremap <silent><leader>/ :execute 'Ag ' . input('Ag/')<CR>
nnoremap <silent><leader>o :only<CR>
nnoremap <silent><leader>q <C-w>q 
nnoremap <silent><leader>b :Neomake! <CR>
nnoremap <Tab> zA

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

if has('nvim')
    tnoremap <C-h> <C-\><C-n>h
    tnoremap <C-j> <C-\><C-n>j
    tnoremap <C-k> <C-\><C-n>k
    tnoremap <C-l> <C-\><C-n>l
endif

noremap <leader>n :set hlsearch!<CR>
noremap <silent><Leader>s :update<CR>

" }}}


