set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
let mapleader = "\<Space>"
noremap <Leader>s :update<CR>

call vundle#begin()		"only place plugins between begin and end
Plugin 'VundleVim/Vundle.vim'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'Valloric/YouCompleteMe'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-unimpaired'
Plugin 'scrooloose/syntastic'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'rdnetto/YCM-Generator'
Plugin 'junegunn/fzf.vim'
Plugin 'junegunn/fzf'
Plugin 'tyru/open-browser.vim'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
call vundle#end()

filetype plugin indent on
filetype on
runtime! ftplugin/man.vim	"enable reading man-pages from vim

" Visual
set t_Co=256				"256 colors
syntax enable				"enable syntax highlighting
colorscheme hybrid			"set theme
set background=dark			"nicer this way

set number					"display numbers in sidebar
set relativenumber			"display relative numbers in sidebar
set tabstop=4				"number of visual spaces in a <tab>
set softtabstop=4			"number soft spaces in <tab> when editing
set shiftwidth=4
set smartindent				"smart indentation
set showcmd					"show entered command in bottom bar
set cursorline				"highlight current line being edited
set lazyredraw				"only redraw when needed 
set wildmenu				"show graphical menu for autocomplete
set lazyredraw				"only redraw screen when needed
set showmatch				"show matching parenthesis
set incsearch				"search as characters are entered
set hlsearch				"highlight search matches
set virtualedit=onemore		"allow curor at end of line

map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:easytags_async = 1
set tags=./tags,tags
let g:easytags_dynamic_files = 2

nnoremap <silent><Leader><Space> :Files<CR>
nnoremap <silent><Leader>a :Buffers<CR>
nnoremap <silent><Leader>t :Tags<CR>
nnoremap <silent><Leader>g :Commits<CR>
nnoremap <silent><leader>/ :execute 'Ag ' . input('Ag/')<CR>

nnoremap <leader>r :source %<CR>
noremap <leader>n :set hlsearch! hlsearch?<CR>
nnoremap <silent> p p`]

nnoremap <silent><leader>b :Dispatch<CR>
nnoremap <silent><leader>u :UpdateTags!<CR>

autocmd FileType python let b:dispatch = 'python %'

